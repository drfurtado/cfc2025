{"ast":null,"code":"/**\n * Copa 50tinha 2025 Artilheiros Classe FC\n * Based on match results\n */\n\nexport const scorersData = {\n  // Top Scorers as of May 17, 2025 (after Round 4)\n  lastUpdated: \"17/05/2025\",\n  scorers: [{\n    name: \"Batata\",\n    team: \"Classe FC\",\n    goals: 3,\n    position: 1\n  }, {\n    name: \"Neno\",\n    team: \"Classe FC\",\n    goals: 2,\n    position: 2\n  }, {\n    name: \"Eleandro\",\n    team: \"Classe FC\",\n    goals: 1,\n    position: 3\n  }, {\n    name: \"Lucio\",\n    team: \"Classe FC\",\n    goals: 1,\n    position: 3\n  }, {\n    name: \"Rildo\",\n    team: \"Classe FC\",\n    goals: 1,\n    position: 3\n  }, {\n    name: \"Zé Luiz\",\n    team: \"Classe FC\",\n    goals: 1,\n    position: 3\n  }, {\n    name: \"Mineiro\",\n    team: \"Classe FC\",\n    goals: 1,\n    position: 3\n  }]\n};\n\n// Helper function to get top scorers sorted by goals (descending)\nexport const getTopScorers = () => {\n  // Sort first by goals descending, then by name ascending for tie-breaking\n  return [...scorersData.scorers].sort((a, b) => {\n    if (b.goals !== a.goals) {\n      return b.goals - a.goals;\n    }\n    return a.name.localeCompare(b.name);\n  });\n};\n\n// Helper function to get the last updated date\nexport const getTopScorersLastUpdated = () => {\n  return scorersData.lastUpdated;\n};","map":{"version":3,"names":["scorersData","lastUpdated","scorers","name","team","goals","position","getTopScorers","sort","a","b","localeCompare","getTopScorersLastUpdated"],"sources":["/Users/ovandef/Documents/GitHub/cfc2025/src/data/tournaments/copa50tinha2025/scorers.js"],"sourcesContent":["/**\n * Copa 50tinha 2025 Artilheiros Classe FC\n * Based on match results\n */\n\nexport const scorersData = {\n  // Top Scorers as of May 17, 2025 (after Round 4)\n  lastUpdated: \"17/05/2025\",\n  scorers: [\n    {\n      name: \"Batata\",\n      team: \"Classe FC\",\n      goals: 3,\n      position: 1\n    },\n    {\n      name: \"Neno\",\n      team: \"Classe FC\",\n      goals: 2,\n      position: 2\n    },\n    {\n      name: \"Eleandro\",\n      team: \"Classe FC\",\n      goals: 1,\n      position: 3\n    },\n    {\n      name: \"Lucio\",\n      team: \"Classe FC\",\n      goals: 1,\n      position: 3\n    },\n    {\n      name: \"Rildo\",\n      team: \"Classe FC\",\n      goals: 1,\n      position: 3\n    },\n    {\n      name: \"Zé Luiz\",\n      team: \"Classe FC\",\n      goals: 1,\n      position: 3\n    },\n    {\n      name: \"Mineiro\",\n      team: \"Classe FC\",\n      goals: 1,\n      position: 3\n    }\n  ]\n};\n\n// Helper function to get top scorers sorted by goals (descending)\nexport const getTopScorers = () => {\n  // Sort first by goals descending, then by name ascending for tie-breaking\n  return [...scorersData.scorers].sort((a, b) => {\n    if (b.goals !== a.goals) {\n      return b.goals - a.goals;\n    }\n    return a.name.localeCompare(b.name);\n  });\n};\n\n// Helper function to get the last updated date\nexport const getTopScorersLastUpdated = () => {\n  return scorersData.lastUpdated;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,WAAW,GAAG;EACzB;EACAC,WAAW,EAAE,YAAY;EACzBC,OAAO,EAAE,CACP;IACEC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE;EACZ,CAAC,EACD;IACEH,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE;EACZ,CAAC,EACD;IACEH,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE;EACZ,CAAC,EACD;IACEH,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE;EACZ,CAAC,EACD;IACEH,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE;EACZ,CAAC,EACD;IACEH,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE;EACZ,CAAC,EACD;IACEH,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACjC;EACA,OAAO,CAAC,GAAGP,WAAW,CAACE,OAAO,CAAC,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC7C,IAAIA,CAAC,CAACL,KAAK,KAAKI,CAAC,CAACJ,KAAK,EAAE;MACvB,OAAOK,CAAC,CAACL,KAAK,GAAGI,CAAC,CAACJ,KAAK;IAC1B;IACA,OAAOI,CAAC,CAACN,IAAI,CAACQ,aAAa,CAACD,CAAC,CAACP,IAAI,CAAC;EACrC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMS,wBAAwB,GAAGA,CAAA,KAAM;EAC5C,OAAOZ,WAAW,CAACC,WAAW;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}