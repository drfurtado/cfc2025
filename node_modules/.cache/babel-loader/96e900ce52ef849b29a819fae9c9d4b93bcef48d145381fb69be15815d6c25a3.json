{"ast":null,"code":"var _jsxFileName = \"/Users/ovandef/Documents/GitHub/cfc2025/src/components/DirectVideoModal.js\",\n  _s = $RefreshSig$();\n// DirectVideoModal.js\nimport React, { useEffect } from 'react';\nimport './SimpleVideoPlayer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DirectVideoModal = ({\n  isOpen,\n  videoUrl,\n  onClose\n}) => {\n  _s();\n  // Convert YouTube URL to embed URL\n  const getEmbedUrl = url => {\n    if (!url) return '';\n\n    // Extract video ID from various YouTube URL formats\n    let videoId = '';\n\n    // Handle youtu.be format\n    if (url.includes('youtu.be/')) {\n      videoId = url.split('youtu.be/')[1];\n      const ampersandPosition = videoId.indexOf('&');\n      if (ampersandPosition !== -1) {\n        videoId = videoId.substring(0, ampersandPosition);\n      }\n    }\n    // Handle youtube.com/watch?v= format\n    else if (url.includes('youtube.com/watch?v=')) {\n      videoId = url.split('v=')[1];\n      const ampersandPosition = videoId.indexOf('&');\n      if (ampersandPosition !== -1) {\n        videoId = videoId.substring(0, ampersandPosition);\n      }\n    }\n\n    // If we found a video ID, create the embed URL\n    if (videoId) {\n      return `https://www.youtube.com/embed/${videoId}?autoplay=1`;\n    }\n\n    // If already in embed format or we couldn't parse, return as is\n    return url;\n  };\n\n  // Handle escape key - Always call hooks at the top level\n  useEffect(() => {\n    // Only add listeners and change body style if the modal is open\n    if (isOpen) {\n      const handleEsc = event => {\n        if (event.key === 'Escape') {\n          onClose();\n        }\n      };\n      document.body.style.overflow = 'hidden'; // Prevent scrolling\n      window.addEventListener('keydown', handleEsc);\n      return () => {\n        document.body.style.overflow = ''; // Restore scrolling\n        window.removeEventListener('keydown', handleEsc);\n      };\n    }\n  }, [isOpen, onClose]);\n  const embedUrl = getEmbedUrl(videoUrl);\n\n  // If not open, don't render anything\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-modal\",\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-modal-content\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"video-modal-close\",\n        onClick: onClose,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-times\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n        src: embedUrl,\n        title: \"YouTube Video\",\n        width: \"100%\",\n        height: \"100%\",\n        frameBorder: \"0\",\n        allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n        allowFullScreen: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(DirectVideoModal, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = DirectVideoModal;\nexport default DirectVideoModal;\nvar _c;\n$RefreshReg$(_c, \"DirectVideoModal\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","DirectVideoModal","isOpen","videoUrl","onClose","_s","getEmbedUrl","url","videoId","includes","split","ampersandPosition","indexOf","substring","handleEsc","event","key","document","body","style","overflow","window","addEventListener","removeEventListener","embedUrl","className","onClick","children","e","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","src","title","width","height","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["/Users/ovandef/Documents/GitHub/cfc2025/src/components/DirectVideoModal.js"],"sourcesContent":["// DirectVideoModal.js\nimport React, { useEffect } from 'react';\nimport './SimpleVideoPlayer.css';\n\nconst DirectVideoModal = ({ isOpen, videoUrl, onClose }) => {\n  // Convert YouTube URL to embed URL\n  const getEmbedUrl = (url) => {\n    if (!url) return '';\n    \n    // Extract video ID from various YouTube URL formats\n    let videoId = '';\n    \n    // Handle youtu.be format\n    if (url.includes('youtu.be/')) {\n      videoId = url.split('youtu.be/')[1];\n      const ampersandPosition = videoId.indexOf('&');\n      if (ampersandPosition !== -1) {\n        videoId = videoId.substring(0, ampersandPosition);\n      }\n    } \n    // Handle youtube.com/watch?v= format\n    else if (url.includes('youtube.com/watch?v=')) {\n      videoId = url.split('v=')[1];\n      const ampersandPosition = videoId.indexOf('&');\n      if (ampersandPosition !== -1) {\n        videoId = videoId.substring(0, ampersandPosition);\n      }\n    }\n    \n    // If we found a video ID, create the embed URL\n    if (videoId) {\n      return `https://www.youtube.com/embed/${videoId}?autoplay=1`;\n    }\n    \n    // If already in embed format or we couldn't parse, return as is\n    return url;\n  };\n  \n  // Handle escape key - Always call hooks at the top level\n  useEffect(() => {\n    // Only add listeners and change body style if the modal is open\n    if (isOpen) {\n      const handleEsc = (event) => {\n        if (event.key === 'Escape') {\n          onClose();\n        }\n      };\n      \n      document.body.style.overflow = 'hidden'; // Prevent scrolling\n      window.addEventListener('keydown', handleEsc);\n      \n      return () => {\n        document.body.style.overflow = ''; // Restore scrolling\n        window.removeEventListener('keydown', handleEsc);\n      };\n    }\n  }, [isOpen, onClose]);\n  \n  const embedUrl = getEmbedUrl(videoUrl);\n  \n  // If not open, don't render anything\n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"video-modal\" onClick={onClose}>\n      <div className=\"video-modal-content\" onClick={e => e.stopPropagation()}>\n        <button className=\"video-modal-close\" onClick={onClose}>\n          <i className=\"fas fa-times\"></i>\n        </button>\n        <iframe \n          src={embedUrl}\n          title=\"YouTube Video\"\n          width=\"100%\"\n          height=\"100%\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n          allowFullScreen\n        ></iframe>\n      </div>\n    </div>\n  );\n};\n\nexport default DirectVideoModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}